// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2021 11:07:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_sample_tst(
	clk,
	good,
	money,
	sampler_tx
);
input  clk;
input [3:0] good;
input [2:0] money;
output sampler_tx;

reg sample;
time current_time;
always @(clk or good or money)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block1_vlg_check_tst (
	en,
	light,
	lit,
	sampler_rx
);
input [5:0] en;
input [3:0] light;
input [7:0] lit;
input sampler_rx;

reg [5:0] en_expected;
reg [3:0] light_expected;
reg [7:0] lit_expected;

reg [5:0] en_prev;
reg [3:0] light_prev;
reg [7:0] lit_prev;

reg [3:0] light_expected_prev;

reg [3:0] last_light_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	en_prev = en;
	light_prev = light;
	lit_prev = lit;
end

// update expected /o prevs

always @(trigger)
begin
	light_expected_prev = light_expected;
end


// expected light[ 3 ]
initial
begin
	light_expected[3] = 1'bX;
end 
// expected light[ 2 ]
initial
begin
	light_expected[2] = 1'bX;
end 
// expected light[ 1 ]
initial
begin
	light_expected[1] = 1'bX;
end 
// expected light[ 0 ]
initial
begin
	light_expected[0] = 1'bX;
end 
// generate trigger
always @(en_expected or en or light_expected or light or lit_expected or lit)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected en = %b | expected light = %b | expected lit = %b | ",en_expected_prev,light_expected_prev,lit_expected_prev);
	$display("| real en = %b | real light = %b | real lit = %b | ",en_prev,light_prev,lit_prev);
`endif
	if (
		( light_expected_prev[0] !== 1'bx ) && ( light_prev[0] !== light_expected_prev[0] )
		&& ((light_expected_prev[0] !== last_light_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_expected_prev);
		$display ("     Real value = %b", light_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_light_exp[0] = light_expected_prev[0];
	end
	if (
		( light_expected_prev[1] !== 1'bx ) && ( light_prev[1] !== light_expected_prev[1] )
		&& ((light_expected_prev[1] !== last_light_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_expected_prev);
		$display ("     Real value = %b", light_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_light_exp[1] = light_expected_prev[1];
	end
	if (
		( light_expected_prev[2] !== 1'bx ) && ( light_prev[2] !== light_expected_prev[2] )
		&& ((light_expected_prev[2] !== last_light_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_expected_prev);
		$display ("     Real value = %b", light_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_light_exp[2] = light_expected_prev[2];
	end
	if (
		( light_expected_prev[3] !== 1'bx ) && ( light_prev[3] !== light_expected_prev[3] )
		&& ((light_expected_prev[3] !== last_light_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_expected_prev);
		$display ("     Real value = %b", light_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_light_exp[3] = light_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] good;
reg [2:0] money;
// wires                                               
wire [5:0] en;
wire [3:0] light;
wire [7:0] lit;

wire sampler;                             

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.en(en),
	.good(good),
	.light(light),
	.lit(lit),
	.money(money)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// money[ 2 ]
initial
begin
	money[2] = 1'b1;
	money[2] = #40000 1'b0;
end 
// money[ 1 ]
initial
begin
	money[1] = 1'b0;
	money[1] = #40000 1'b1;
	money[1] = #40000 1'b0;
end 
// money[ 0 ]
initial
begin
	money[0] = 1'b0;
	money[0] = #80000 1'b1;
	money[0] = #40000 1'b0;
end 
// good[ 3 ]
initial
begin
	good[3] = 1'b0;
	good[3] = #280000 1'b1;
	good[3] = #40000 1'b0;
end 
// good[ 2 ]
initial
begin
	good[2] = 1'b0;
	good[2] = #240000 1'b1;
	good[2] = #40000 1'b0;
end 
// good[ 1 ]
initial
begin
	good[1] = 1'b0;
	good[1] = #120000 1'b1;
	good[1] = #40000 1'b0;
	good[1] = #40000 1'b1;
	good[1] = #40000 1'b0;
end 
// good[ 0 ]
initial
begin
	good[0] = 1'b0;
	good[0] = #160000 1'b1;
	good[0] = #40000 1'b0;
end 

Block1_vlg_sample_tst tb_sample (
	.clk(clk),
	.good(good),
	.money(money),
	.sampler_tx(sampler)
);

Block1_vlg_check_tst tb_out(
	.en(en),
	.light(light),
	.lit(lit),
	.sampler_rx(sampler)
);
endmodule

