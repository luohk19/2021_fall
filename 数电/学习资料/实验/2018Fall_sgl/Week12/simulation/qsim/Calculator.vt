// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2018 11:46:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Calculator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Calculator_vlg_sample_tst(
	btn_control,
	i0,
	i1,
	sel,
	sampler_tx
);
input [1:0] btn_control;
input [3:0] i0;
input [3:0] i1;
input [1:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(btn_control or i0 or i1 or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Calculator_vlg_check_tst (
	ans_r,
	show_num,
	show_place,
	sampler_rx
);
input [7:0] ans_r;
input [6:0] show_num;
input [5:0] show_place;
input sampler_rx;

reg [7:0] ans_r_expected;
reg [6:0] show_num_expected;
reg [5:0] show_place_expected;

reg [7:0] ans_r_prev;
reg [6:0] show_num_prev;
reg [5:0] show_place_prev;

reg [7:0] ans_r_expected_prev;
reg [6:0] show_num_expected_prev;
reg [5:0] show_place_expected_prev;

reg [7:0] last_ans_r_exp;
reg [6:0] last_show_num_exp;
reg [5:0] last_show_place_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	ans_r_prev = ans_r;
	show_num_prev = show_num;
	show_place_prev = show_place;
end

// update expected /o prevs

always @(trigger)
begin
	ans_r_expected_prev = ans_r_expected;
	show_num_expected_prev = show_num_expected;
	show_place_expected_prev = show_place_expected;
end


// expected ans_r[ 7 ]
initial
begin
	ans_r_expected[7] = 1'bX;
end 
// expected ans_r[ 6 ]
initial
begin
	ans_r_expected[6] = 1'bX;
end 
// expected ans_r[ 5 ]
initial
begin
	ans_r_expected[5] = 1'bX;
end 
// expected ans_r[ 4 ]
initial
begin
	ans_r_expected[4] = 1'bX;
end 
// expected ans_r[ 3 ]
initial
begin
	ans_r_expected[3] = 1'bX;
end 
// expected ans_r[ 2 ]
initial
begin
	ans_r_expected[2] = 1'bX;
end 
// expected ans_r[ 1 ]
initial
begin
	ans_r_expected[1] = 1'bX;
end 
// expected ans_r[ 0 ]
initial
begin
	ans_r_expected[0] = 1'bX;
end 
// expected show_num[ 6 ]
initial
begin
	show_num_expected[6] = 1'bX;
end 
// expected show_num[ 5 ]
initial
begin
	show_num_expected[5] = 1'bX;
end 
// expected show_num[ 4 ]
initial
begin
	show_num_expected[4] = 1'bX;
end 
// expected show_num[ 3 ]
initial
begin
	show_num_expected[3] = 1'bX;
end 
// expected show_num[ 2 ]
initial
begin
	show_num_expected[2] = 1'bX;
end 
// expected show_num[ 1 ]
initial
begin
	show_num_expected[1] = 1'bX;
end 
// expected show_num[ 0 ]
initial
begin
	show_num_expected[0] = 1'bX;
end 
// expected show_place[ 5 ]
initial
begin
	show_place_expected[5] = 1'bX;
end 
// expected show_place[ 4 ]
initial
begin
	show_place_expected[4] = 1'bX;
end 
// expected show_place[ 3 ]
initial
begin
	show_place_expected[3] = 1'bX;
end 
// expected show_place[ 2 ]
initial
begin
	show_place_expected[2] = 1'bX;
end 
// expected show_place[ 1 ]
initial
begin
	show_place_expected[1] = 1'bX;
end 
// expected show_place[ 0 ]
initial
begin
	show_place_expected[0] = 1'bX;
end 
// generate trigger
always @(ans_r_expected or ans_r or show_num_expected or show_num or show_place_expected or show_place)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ans_r = %b | expected show_num = %b | expected show_place = %b | ",ans_r_expected_prev,show_num_expected_prev,show_place_expected_prev);
	$display("| real ans_r = %b | real show_num = %b | real show_place = %b | ",ans_r_prev,show_num_prev,show_place_prev);
`endif
	if (
		( ans_r_expected_prev[0] !== 1'bx ) && ( ans_r_prev[0] !== ans_r_expected_prev[0] )
		&& ((ans_r_expected_prev[0] !== last_ans_r_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[0] = ans_r_expected_prev[0];
	end
	if (
		( ans_r_expected_prev[1] !== 1'bx ) && ( ans_r_prev[1] !== ans_r_expected_prev[1] )
		&& ((ans_r_expected_prev[1] !== last_ans_r_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[1] = ans_r_expected_prev[1];
	end
	if (
		( ans_r_expected_prev[2] !== 1'bx ) && ( ans_r_prev[2] !== ans_r_expected_prev[2] )
		&& ((ans_r_expected_prev[2] !== last_ans_r_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[2] = ans_r_expected_prev[2];
	end
	if (
		( ans_r_expected_prev[3] !== 1'bx ) && ( ans_r_prev[3] !== ans_r_expected_prev[3] )
		&& ((ans_r_expected_prev[3] !== last_ans_r_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[3] = ans_r_expected_prev[3];
	end
	if (
		( ans_r_expected_prev[4] !== 1'bx ) && ( ans_r_prev[4] !== ans_r_expected_prev[4] )
		&& ((ans_r_expected_prev[4] !== last_ans_r_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[4] = ans_r_expected_prev[4];
	end
	if (
		( ans_r_expected_prev[5] !== 1'bx ) && ( ans_r_prev[5] !== ans_r_expected_prev[5] )
		&& ((ans_r_expected_prev[5] !== last_ans_r_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[5] = ans_r_expected_prev[5];
	end
	if (
		( ans_r_expected_prev[6] !== 1'bx ) && ( ans_r_prev[6] !== ans_r_expected_prev[6] )
		&& ((ans_r_expected_prev[6] !== last_ans_r_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[6] = ans_r_expected_prev[6];
	end
	if (
		( ans_r_expected_prev[7] !== 1'bx ) && ( ans_r_prev[7] !== ans_r_expected_prev[7] )
		&& ((ans_r_expected_prev[7] !== last_ans_r_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans_r[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_r_expected_prev);
		$display ("     Real value = %b", ans_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ans_r_exp[7] = ans_r_expected_prev[7];
	end
	if (
		( show_num_expected_prev[0] !== 1'bx ) && ( show_num_prev[0] !== show_num_expected_prev[0] )
		&& ((show_num_expected_prev[0] !== last_show_num_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[0] = show_num_expected_prev[0];
	end
	if (
		( show_num_expected_prev[1] !== 1'bx ) && ( show_num_prev[1] !== show_num_expected_prev[1] )
		&& ((show_num_expected_prev[1] !== last_show_num_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[1] = show_num_expected_prev[1];
	end
	if (
		( show_num_expected_prev[2] !== 1'bx ) && ( show_num_prev[2] !== show_num_expected_prev[2] )
		&& ((show_num_expected_prev[2] !== last_show_num_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[2] = show_num_expected_prev[2];
	end
	if (
		( show_num_expected_prev[3] !== 1'bx ) && ( show_num_prev[3] !== show_num_expected_prev[3] )
		&& ((show_num_expected_prev[3] !== last_show_num_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[3] = show_num_expected_prev[3];
	end
	if (
		( show_num_expected_prev[4] !== 1'bx ) && ( show_num_prev[4] !== show_num_expected_prev[4] )
		&& ((show_num_expected_prev[4] !== last_show_num_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[4] = show_num_expected_prev[4];
	end
	if (
		( show_num_expected_prev[5] !== 1'bx ) && ( show_num_prev[5] !== show_num_expected_prev[5] )
		&& ((show_num_expected_prev[5] !== last_show_num_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[5] = show_num_expected_prev[5];
	end
	if (
		( show_num_expected_prev[6] !== 1'bx ) && ( show_num_prev[6] !== show_num_expected_prev[6] )
		&& ((show_num_expected_prev[6] !== last_show_num_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_num[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_num_expected_prev);
		$display ("     Real value = %b", show_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_show_num_exp[6] = show_num_expected_prev[6];
	end
	if (
		( show_place_expected_prev[0] !== 1'bx ) && ( show_place_prev[0] !== show_place_expected_prev[0] )
		&& ((show_place_expected_prev[0] !== last_show_place_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_place[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_place_expected_prev);
		$display ("     Real value = %b", show_place_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_show_place_exp[0] = show_place_expected_prev[0];
	end
	if (
		( show_place_expected_prev[1] !== 1'bx ) && ( show_place_prev[1] !== show_place_expected_prev[1] )
		&& ((show_place_expected_prev[1] !== last_show_place_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_place[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_place_expected_prev);
		$display ("     Real value = %b", show_place_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_show_place_exp[1] = show_place_expected_prev[1];
	end
	if (
		( show_place_expected_prev[2] !== 1'bx ) && ( show_place_prev[2] !== show_place_expected_prev[2] )
		&& ((show_place_expected_prev[2] !== last_show_place_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_place[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_place_expected_prev);
		$display ("     Real value = %b", show_place_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_show_place_exp[2] = show_place_expected_prev[2];
	end
	if (
		( show_place_expected_prev[3] !== 1'bx ) && ( show_place_prev[3] !== show_place_expected_prev[3] )
		&& ((show_place_expected_prev[3] !== last_show_place_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_place[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_place_expected_prev);
		$display ("     Real value = %b", show_place_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_show_place_exp[3] = show_place_expected_prev[3];
	end
	if (
		( show_place_expected_prev[4] !== 1'bx ) && ( show_place_prev[4] !== show_place_expected_prev[4] )
		&& ((show_place_expected_prev[4] !== last_show_place_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_place[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_place_expected_prev);
		$display ("     Real value = %b", show_place_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_show_place_exp[4] = show_place_expected_prev[4];
	end
	if (
		( show_place_expected_prev[5] !== 1'bx ) && ( show_place_prev[5] !== show_place_expected_prev[5] )
		&& ((show_place_expected_prev[5] !== last_show_place_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port show_place[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", show_place_expected_prev);
		$display ("     Real value = %b", show_place_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_show_place_exp[5] = show_place_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Calculator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] btn_control;
reg [3:0] i0;
reg [3:0] i1;
reg [1:0] sel;
// wires                                               
wire [7:0] ans_r;
wire [6:0] show_num;
wire [5:0] show_place;

wire sampler;                             

// assign statements (if any)                          
Calculator i1 (
// port map - connection between master ports and signals/registers   
	.ans_r(ans_r),
	.btn_control(btn_control),
	.i0(i0),
	.i1(i1),
	.sel(sel),
	.show_num(show_num),
	.show_place(show_place)
);
// btn_control[ 1 ]
initial
begin
	btn_control[1] = 1'b0;
end 
// btn_control[ 0 ]
initial
begin
	btn_control[0] = 1'b0;
end 
// i0[ 3 ]
initial
begin
	i0[3] = 1'b0;
end 
// i0[ 2 ]
initial
begin
	i0[2] = 1'b0;
end 
// i0[ 1 ]
initial
begin
	i0[1] = 1'b0;
end 
// i0[ 0 ]
always
begin
	i0[0] = 1'b0;
	i0[0] = #10000 1'b1;
	#10000;
end 
// i1[ 3 ]
initial
begin
	i1[3] = 1'b0;
end 
// i1[ 2 ]
initial
begin
	i1[2] = 1'b0;
end 
// i1[ 1 ]
initial
begin
	i1[1] = 1'b0;
end 
// i1[ 0 ]
initial
begin
	i1[0] = 1'b1;
	# 10000;
	repeat(49)
	begin
		i1[0] = 1'b0;
		i1[0] = #10000 1'b1;
		# 10000;
	end
	i1[0] = 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b1;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b1;
end 

Calculator_vlg_sample_tst tb_sample (
	.btn_control(btn_control),
	.i0(i0),
	.i1(i1),
	.sel(sel),
	.sampler_tx(sampler)
);

Calculator_vlg_check_tst tb_out(
	.ans_r(ans_r),
	.show_num(show_num),
	.show_place(show_place),
	.sampler_rx(sampler)
);
endmodule

